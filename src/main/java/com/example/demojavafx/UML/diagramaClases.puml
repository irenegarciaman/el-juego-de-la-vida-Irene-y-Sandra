@startuml
'https://plantuml.com/object-diagram


class JSON{
guardarArchivo()
cargarArchivo()
}
class BucleDeControl {
    - columna: int
    - fila: int
    - matriz: Celda[][]
    - turno: int
    - contadorReproduccionesTotales: int
    - contadorClonacionesTotales: int
    + BucleDeControl(int, int)
    + getColumna(): int
    + setColumna(int): void
    + getFila(): int
    + setFila(int): void
    + actualizarIndividuo(): void
    + actualizarRecursos(): void
    + movimiento(): void
    + mejorasRecursos(): void
    + reproduccion(): void
    + clonacion(): void
    + desaparecerIndividuos(): void
    + nuevoRecurso(): void
    + condicionFinalizacion(): boolean
    + bucleEntero(): void
    + grafoColaOperacionesIndividuos(): GrafoNuevo
}

BucleDeControl *-- Celda
BucleDeControl *-- Individuo
BucleDeControl *-- Recursos
BucleDeControl *-- Agua
BucleDeControl *-- Comida
BucleDeControl *-- Biblioteca
BucleDeControl *-- Tesoro
BucleDeControl *-- Pozo
BucleDeControl *-- Montana
BucleDeControl *-- IndAvanzado
BucleDeControl *-- IndNormal
BucleDeControl *-- IndBasico
BucleDeControl *-- ListaEnlazada
BucleDeControl *-- ElementoLE
BucleDeControl *-- ElementoLDE
BucleDeControl *-- NodoArbol
BucleDeControl *-- ListaSimple
BucleDeControl *-- NodoGrafoNuevo
BucleDeControl *-- ArcoGrafoNuevo
BucleDeControl *-- GrafoNuevo

class BucleDeControlProperties {
    - original: BucleDeControl
    - columnas: IntegerProperty
    - filas: IntegerProperty
    - matriz: Celda[][]
    + getFilas(): int
    + getColumnas(): int
    + BucleDeControlProperties(BucleDeControl)
    + commit(): void
    + rollback(): void
    + getOriginal(): BucleDeControl
    + setOriginal(BucleDeControl): void
    + columnasProperty(): Property<Number>
    + filasProperty(): Property<Number>
    + matrizProperty(): Celda[][]
}
BucleDeControlProperties *-- BucleDeControl
BucleDeControlProperties *-- Celda


class Individuo{
-id:int
-generacion:int
-turnosRestantes:int
-probReproduccion:int
-probClonacion:int
-probMuerte:int
-posN:int
-posM:int
+Individuo():void
+Individuo(id:int,generacion:int,turnosRestantes:int,
probReproduccion:int,probClonacion:int,probMuerte:int,posN:int,posM:int)
+Individuo(id:int,generacion:int,turnosRestantes:int,
          probReproduccion:int,probClonacion:int,probMuerte:int)
+Individuo(id:int,turnosRestantes:int)
+getId():int
+setId(id:int):void
+getGeneracion():int
+setGeneracion(generacion:int):void
+getTurnosRestantes():int
+setTurnosRestantes(turnosRestantes:int):void
+getProbReproduccion():int
+setProbReproduccion(probReproduccion:int):void
+getProbClonacion():int
+setProbClonacion(probClonacion:int):void
+getProbMuerte():int
+setProbMuerte(probMuerte:int):void
+getPosN():int
+setPosN(posN:int):void
+getPosM():int
+setPosM(posM:int):void
+toString():String

+abstract moverse(maxColumnas:int,maxFilas:int, matriz Celda[][])
+abstract reproduccion_entre_iguales()
+reproduccion_entre_distintos()
+restar_turno_vida()
+cambiar_prob_reproduccion()
+cambiar_prob_clonacion()
}
class IndBasico{
+IndBasico(id:int)
+IndBasico(id:int,turnosRestantes:int)
+moverse(maxColumnas:int,maxFilas:int, matriz Celda[][])
}
class IndNormal{
+IndNormal(id:int)
+IndNormal(id:int,turnosRestantes:int)
+moverse(maxColumnas:int,maxFilas:int, matriz Celda[][])
+creacionListaMovimiento (posNDeseado:int, posMDeseado:int,
posN:int, posM:int,matriz Celda[][])
}
class IndAvanzado{
+IndAvanzado(id:int)
+IndAvanzado(id:int,turnosRestantes:int)
+moverse(maxColumnas:int,maxFilas:int, matriz Celda[][])
+creacionListaMovimiento (maxColumnas:int,maxFilas:int,
 posNDeseado:int, posMDeseado:int, posN:int, posM:int,matriz Celda[][])
}



class ArbolBinario{
-raiz:NodoArbol
+isVacia():boolean
-add(dato:TipoDelDato, raiz NodoArbol)
+add(dato:TipoDelDato)
+getGrado(nodo:NodoArbol, int:result):int
-getCamino(nodo:NodoArbol, raiz:NodoArbol, lista:ListaEnlazada):ListaEnlazada
+getCamino(nodo:NodoArbol)
+getLongitud(nodo:NodoArbol)
+getSubArbolIzquierda():ArbolBinarioDeBusqueda
+getSubArbolDerecha():ArbolBinarioDeBusqueda
-getListaPreOrden(nodo:NodoArbol, lista:ListaEnlazada):ListaEnlazada
+getListaPreOrden():ListaEnlazada
-getListaPostOrden(nodo:NodoArbol, lista:ListaEnlazada):ListaEnlazada
+getListaPostOrden():ListaEnlazada
-getListaOrdenCentral(nodo:NodoArbol, lista:ListaEnlazada):ListaEnlazada
+getListaOrdenCentral():ListaEnlazada
-getAltura(nodo:NodoArbol, p:int):int
+getAltura():int
+getListaDatosNivel(nivel:int, nodo:NodoArbol, lista:ListaEnlazada):ListaEnlazada
+getListaDatosNivel(nivel:int):ListaEnlazada
-isArbolCompleto(nodo:NodoArbol):boolean
+isArbolHomogeneo():Boolean
-isArbolCompleto(nodo:NodoArbol, numero:int):Boolean
+isArbolCompleto():Boolean
-isArbolCasiCompleto(nodo:NodoArbol, numero:int):Boolean
+isArbolCasiCompleto():Boolean
}
NodoArbol --> NodoArbol:derecha
NodoArbol --> NodoArbol:izquierda

class NodoArbol{
-derecha:NodoArbol
-izquierda:NodoArbol
-dato:TipoDelDato
+getDerecha():NodoArbol
+setDerecha(nodo:NodoArbol)
+getIzquierda():NodoArbol
+setIzquierda(nodo:NodoArbol)
+getDato():TipoDelDato
+setDato(dato:TipoDelDato)
+gradoNodo():int
+esHoja():boolean
}



class NodoGrafoNuevo{
-dato: TipoDelDato
-listaEntrada: ListaSimple<ArcoGrafoNuevo>
-listaSalida: ListaSimple<ArcoGrafoNuevo>
+NodoGrafoNuevo(dato:TipoDelDato)
+getDato(): TipoDelDato
}
class ArcoGrafoNuevo{
+relacion:TipoDelDato
+origen: NodoGrafoNuevo<TipoDelDato>
+destino: NodoGrafoNuevo<TipoDelDato>
+peso: double
+ArcoGrafoNuevo(relacion:TipoDelDato,origen:NodoGrafoNuevo<TipoDelDato>,
destino:NodoGrafoNuevo<TipoDelDato>,peso;double)
}

class GrafoNuevo{
-listaVertices: ListaSimple<NodoGrafoNuevo>
-listaArcos:  ListaSimple<ArcoGrafoNuevo>

+GrafoNuevo(listaVertices:ListaSimple<NodoGrafoNuevo>,listaArcos:ListaSimple<ArcoGrafoNuevo>)
+addNodo(nodo:NodoGrafoNuevo):void
+addArco(nodo:ArcoGrafoNuevo):void
+borrarArco(arco:ArcoGrafoNuevo):void
+borrarNodo(nodo:NodoGrafoNuevo):void
+recuperarNodo(nodo:NodoGrafoNuevo<TipoDelDato>):boolean
+recuperarArco(arco:ArcoGrafoNuevo<TipoDelDato>):boolean
+dijkstra(origen:NodoGrafoNuevo<TipoDelDato>):Cola<Camino<TipoDelDato>>
+dijkstra_init(origen:NodoGrafoNuevo<TipoDelDato>,distancias:Cola<double>,
colaPendientes:Cola<NodoGrafoNuevo<TipoDelDato>>,nodosAnteriores:Cola<NodoGrafoNuevo<TipoDelDato>>):void
+dijkstra_calcula(distancias:Cola<double>,colaPendientes:Cola<NodoGrafoNuevo<TipoDelDato>>,
nodosAnteriores:Cola<NodoGrafoNuevo<TipoDelDato>>):void
+dijkstra_procesaResultados(distancias:Cola<Double>, nodosAnteriores:Cola<NodoGrafoNuevo<TipoDelDato>> ,
origen: NodoGrafoNuevo<TipoDelDato> ):Cola<Camino<TipoDelDato>>
}




class ListaSimple {
-datos:ElementoLS[]
-maximo:int
+isVacia():boolean
+vaciar()
-add(el:ElementoLS):int
+add(s:String)
+add(o:Object)
+insert(s:String,posicion:int)
+insert(o:Object,posicion:int)
+del(posicion:int):int
+getNumeroElementos():int
+getPosicion(el:ElementoLS):int
+getPrimero():ElementoLS
+getUltimo():ElementoLS
-getSiguiente(el:ElementoLS):ElementoLS
+getElemento(posicion:int):ElementoLS
}

class ElementoLS {
-data:Object
+getData():Object
+setData(o Object):Object
}

ElementoLS <-- ListaSimple: datos

class ListaEnlazada {
-primero:ElementoLE
+isVacia():boolean
+vaciar()
-add(el:ElementoLE):int
+add(s:String)
+add(o:Object)
+insert(s:String,posicion:int)
+insert(o:Object,posicion:int)
+del(posicion:int):int
+getNumeroElementos():int
+getPosicion(el:ElementoLE):int
+getPrimero():ElementoLE
+getUltimo():ElementoLE
+getSiguiente(el:ElementoLE):ElementoLE
+getElemento(posicion:int):ElementoLE
}

class ElementoLE {
-siguiente:ElementoLE
-data:Object
-insertarmeEn(el:ElementoLE)
-getSiguiente():ElementoLE
+getData():Object
+setData():Object
}

ListaEnlazada --> ElementoLE:primero
ElementoLE --> ElementoLE:siguiente


class Cola{
-cabeza:ElementoLE
-cola:ElementoLE
+esVacia():boolean
+push(el:ElementoLE)
+pop():ElementoLE
}

package Recurso{
abstract class Recursos{

}
class RecursosProperties{

}
Recursos--|>RecursosProperties
class Agua{

}
class AguaProperties {

}
Agua --|> AguaProperties
class Comida{

}
class ComidaProperties {

}
Comida <-- ComidaProperties
class Montana{

}
class MontanaProperties {

}
Montana --|> MontanaProperties
class Tesoro{

}
class TesoroProperties {

}
Tesoro --|> TesoroProperties
class Biblioteca{

}
class BibliotecaProperties {

}
Biblioteca--|> BibliotecaProperties
class Pozo{

}
class PozoProperties {

}
Pozo --|> PozoProperties
}


Individuo "0,1,2,3" --o BucleDeControl
Entorno "0,1,2,3" --o BucleDeControl
Tablero "NxM" --o BucleDeControl


IndAvanzado --|> Individuo
IndBasico --|> Individuo
IndNormal --|> Individuo

Recursos --|> Entorno
Agua ---|> Recursos
Montana ---|> Recursos
Comida --|> Recursos
Tesoro --|> Recursos
Biblioteca ---|> Recursos
Pozo --|> Recursos

ElementoLE <-- Cola
NodoArbol <-- ArbolBinario
ArbolBinario --|> JSON
ListaEnlazada --|> JSON

Cola --|> JSON
Individuo <-- ArbolBinario
ListaSimple --|> JSON

NodoGrafoNuevo --> ListaSimple: listaSalida
NodoGrafoNuevo --> ListaSimple: listaEntrada

ArcoGrafoNuevo --> NodoGrafoNuevo: origen
ArcoGrafoNuevo --> NodoGrafoNuevo: destino

GrafoNuevo --> ListaSimple:listaVertices
GrafoNuevo --> ListaSimple:listaArcos





class Celda{
- listaIndividuo: ListaEnlazada<Individuo>
- listaRecurso: ListaEnlazada<Recursos>
+ Celda()
+ Celda(ListaEnlazada<Individuo>, ListaEnlazada<Recursos>)
+ getListaIndividuo(): ListaEnlazada<Individuo>
+ setListaIndividuo(ListaEnlazada<Individuo>)
+ getListaRecurso(): ListaEnlazada<Recursos>
+ setListaRecurso(ListaEnlazada<Recursos>)
+ addIndividuo(Individuo): void
+ addRecurso(Recursos): void
+ eliminarRecurso(Recursos): void
+ eliminarIndividuo(Individuo): void
+ toString(): String
}
Celda -- ListaEnlazada
Celda *-- Individuo
Celda *-- Recursos
Celda "1" -- "3" ElementoLE : contains

class CeldaProperties {
    - original: Celda[][]
    - properties: Celda[][]
    + CeldaProperties(Celda[][])
    + getOriginal(): Celda[][]
    + setOriginal(Celda[][]): void
    + getProperties(): Celda[][]
    + setProperties(Celda[][]): void
    + commit(): void
    + rollback(): void
}


CeldaProperties *-- Celda

class RecursosController {}

RecursosController --|> Initializable
RecursosController --|> Stage
RecursosController -- RecursosProperties
RecursosController -- AguaProperties
RecursosController -- BibliotecaProperties
RecursosController -- ComidaProperties
RecursosController -- MontanaProperties
RecursosController -- PozoProperties
RecursosController -- TesoroProperties
RecursosController -- IndividuoProperties
RecursosController -- BucleDeControlProperties
RecursosController -- CeldaProperties
RecursosController -- ListaEnlazada


class PantallaFinalController {}

PantallaFinalController --|> Initializable
PantallaFinalController --|> Stage
PantallaFinalController -- BucleDeControlProperties
PantallaFinalController -- DefaultMutableTreeNode
PantallaFinalController -- ArbolBinarioDeBusqueda
PantallaFinalController -- Individuo

class ModCeldaController {
}

ModCeldaController --|> Initializable
ModCeldaController --|> Stage
ModCeldaController -- BucleDeControlProperties

class Matriz1Controller {}
Matriz1Controller --|> Initializable
class JuegoController {}

JuegoController -- BucleDeControlProperties
JuegoController -- RecursosProperties
JuegoController -- AguaProperties
JuegoController -- BibliotecaProperties
JuegoController -- ComidaProperties
JuegoController -- MontanaProperties
JuegoController -- PozoProperties
JuegoController -- TesoroProperties
JuegoController -- IndividuoProperties
JuegoController -- Celda

class InfoCeldaController {
}
InfoCeldaController -- BucleDeControlProperties
class HelloController {

}



HelloController -- RecursosProperties
HelloController -- AguaProperties
HelloController -- BibliotecaProperties
HelloController -- ComidaProperties
HelloController -- MontanaProperties
HelloController -- PozoProperties
HelloController -- TesoroProperties
HelloController -- IndividuoProperties
HelloController -- BucleDeControl
HelloController -- BucleDeControlProperties

class HelloApplication {

}
HelloApplication -- Recursos
HelloApplication -- RecursosProperties
HelloApplication -- Agua
HelloApplication -- AguaProperties
HelloApplication -- Biblioteca
HelloApplication -- BibliotecaProperties
HelloApplication -- Comida
HelloApplication -- ComidaProperties
HelloApplication -- Montana
HelloApplication -- MontanaProperties
HelloApplication -- Tesoro
HelloApplication -- TesoroProperties
HelloApplication -- Pozo
HelloApplication -- PozoProperties
HelloApplication -- Individuo
HelloApplication -- IndividuoProperties
HelloApplication -- BucleDeControl
HelloApplication -- BucleDeControlProperties

class GuardarDatos {
    - listaIndividuo: String[]
    - listaRecurso: String[]
    - infoIndyRec: int[]
    - fyc: int[]
    + guardarDatos(BucleDeControl, Individuo, Agua, Biblioteca, Comida, Montana, Pozo, Tesoro)
    + cargarBucle(): BucleDeControl
    + cargarIndividuo(): Individuo
    + cargarRecursos(): Recursos
    + cargarAgua(): Agua
    + cargarBiblioteca(): Biblioteca
    + cargarComida(): Comida
    + cargarMontana(): Montana
    + cargarTesoro(): Tesoro
    + cargarPozo(): Pozo
    + fromStringI(String): Individuo
    + fromStringR(String): Recursos
}
GuardarDatos -- BucleDeControl
GuardarDatos -- Individuo
GuardarDatos -- Agua
GuardarDatos -- Biblioteca
GuardarDatos -- Comida
GuardarDatos -- Montana
GuardarDatos -- Pozo
GuardarDatos -- Tesoro
GuardarDatos -- Gson1
GuardarDatos -- Recursos
class AddEliminiarController {

}


AddEliminiarController *-- BucleDeControlProperties
AddEliminiarController *-- Celda

class AjustesMidJuegoController {

}
AjustesMidJuegoController  -->  RecursosProperties
AjustesMidJuegoController  -->  AguaProperties
AjustesMidJuegoController  -->  BibliotecaProperties
AjustesMidJuegoController  -->  ComidaProperties
AjustesMidJuegoController  -->  MontanaProperties
AjustesMidJuegoController  -->  PozoProperties
AjustesMidJuegoController  -->  TesoroProperties
AjustesMidJuegoController  -->  IndividuoProperties
AjustesMidJuegoController  -->  BucleDeControlProperties
AjustesMidJuegoController  -->  ListaEnlazada





@enduml
