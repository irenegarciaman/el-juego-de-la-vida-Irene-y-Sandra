@startuml
'https://plantuml.com/object-diagram

class Tablero{
fila:int
columna:int
crearMatriz(fila,columna)
asignarPosicionObjeto(fila,columna)
max3elementos() -- Excepcion
eliminarElemento(celda)
botonStart()
botonStop()
introducirParam()
}
class JSON{
guardarArchivo()
cargarArchivo()
}
class BucleDeControl {
Individuo ind
actualizarIndividuo()
ActualizarRecursos()
movimiento()
actualizarindividuoRecursos()
reproduccion()
nuevosRecursos()
haFinalizado():boolean
}

class Individuo{
-id:int
-generacion:int
-turnosRestantes:int
-probReproduccion:int
-probClonacion:int
-probMuerte:int
-posN:int
-posM:int
+Individuo():void
+Individuo(id:int,generacion:int,turnosRestantes:int,
probReproduccion:int,probClonacion:int,probMuerte:int,posN:int,posM:int)
+Individuo(id:int,generacion:int,turnosRestantes:int,
          probReproduccion:int,probClonacion:int,probMuerte:int)
+Individuo(id:int,turnosRestantes:int)
+getId():int
+setId(id:int):void
+getGeneracion():int
+setGeneracion(generacion:int):void
+getTurnosRestantes():int
+setTurnosRestantes(turnosRestantes:int):void
+getProbReproduccion():int
+setProbReproduccion(probReproduccion:int):void
+getProbClonacion():int
+setProbClonacion(probClonacion:int):void
+getProbMuerte():int
+setProbMuerte(probMuerte:int):void
+getPosN():int
+setPosN(posN:int):void
+getPosM():int
+setPosM(posM:int):void
+toString():String

+abstract moverse()
+abstract reproduccion_entre_iguales()
+reproduccion_entre_distintos()
+restar_turno_vida()
+cambiar_prob_reproduccion()
+cambiar_prob_clonacion()
}
class IndBasico{
+IndBasico(id:int)
+IndBasico(id:int,turnosRestantes:int)
+moverse_en_celda()
}
class IndNormal{
+IndNormal(id:int)
+IndNormal(id:int,turnosRestantes:int)
+moverse_en_celda()
}
class IndAvanzado{
+IndAvanzado(id:int)
+IndAvanzado(id:int,turnosRestantes:int)
+moverse_en_celda()
}



class ArbolBinario{
-raiz:NodoArbol
+isVacia():boolean
-add(dato:TipoDelDato, raiz NodoArbol)
+add(dato:TipoDelDato)
+getGrado(nodo:NodoArbol, int:result):int
-getCamino(nodo:NodoArbol, raiz:NodoArbol, lista:ListaEnlazada):ListaEnlazada
+getCamino(nodo:NodoArbol)
+getLongitud(nodo:NodoArbol)
+getSubArbolIzquierda():ArbolBinarioDeBusqueda
+getSubArbolDerecha():ArbolBinarioDeBusqueda
-getListaPreOrden(nodo:NodoArbol, lista:ListaEnlazada):ListaEnlazada
+getListaPreOrden():ListaEnlazada
-getListaPostOrden(nodo:NodoArbol, lista:ListaEnlazada):ListaEnlazada
+getListaPostOrden():ListaEnlazada
-getListaOrdenCentral(nodo:NodoArbol, lista:ListaEnlazada):ListaEnlazada
+getListaOrdenCentral():ListaEnlazada
-getAltura(nodo:NodoArbol, p:int):int
+getAltura():int
+getListaDatosNivel(nivel:int, nodo:NodoArbol, lista:ListaEnlazada):ListaEnlazada
+getListaDatosNivel(nivel:int):ListaEnlazada
-isArbolCompleto(nodo:NodoArbol):boolean
+isArbolHomogeneo():Boolean
-isArbolCompleto(nodo:NodoArbol, numero:int):Boolean
+isArbolCompleto():Boolean
-isArbolCasiCompleto(nodo:NodoArbol, numero:int):Boolean
+isArbolCasiCompleto():Boolean
}
NodoArbol --> NodoArbol:derecha
NodoArbol --> NodoArbol:izquierda

class NodoArbol{
-derecha:NodoArbol
-izquierda:NodoArbol
-dato:TipoDelDato
+getDerecha():NodoArbol
+setDerecha(nodo:NodoArbol)
+getIzquierda():NodoArbol
+setIzquierda(nodo:NodoArbol)
+getDato():TipoDelDato
+setDato(dato:TipoDelDato)
+gradoNodo():int
+esHoja():boolean
}



class NodoGrafoNuevo{
-dato: TipoDelDato
-listaEntrada: ListaSimple<ArcoGrafoNuevo>
-listaSalida: ListaSimple<ArcoGrafoNuevo>
+NodoGrafoNuevo(dato:TipoDelDato)
+getDato(): TipoDelDato
}
class ArcoGrafoNuevo{
+relacion:TipoDelDato
+origen: NodoGrafoNuevo<TipoDelDato>
+destino: NodoGrafoNuevo<TipoDelDato>
+peso: double
+ArcoGrafoNuevo(relacion:TipoDelDato,origen:NodoGrafoNuevo<TipoDelDato>,
destino:NodoGrafoNuevo<TipoDelDato>,peso;double)
}

class GrafoNuevo{
-listaVertices: ListaSimple<NodoGrafoNuevo>
-listaArcos:  ListaSimple<ArcoGrafoNuevo>

+GrafoNuevo(listaVertices:ListaSimple<NodoGrafoNuevo>,listaArcos:ListaSimple<ArcoGrafoNuevo>)
+addNodo(nodo:NodoGrafoNuevo):void
+addArco(nodo:ArcoGrafoNuevo):void
+borrarArco(arco:ArcoGrafoNuevo):void
+borrarNodo(nodo:NodoGrafoNuevo):void
+recuperarNodo(nodo:NodoGrafoNuevo<TipoDelDato>):boolean
+recuperarArco(arco:ArcoGrafoNuevo<TipoDelDato>):boolean
+dijkstra(origen:NodoGrafoNuevo<TipoDelDato>):Cola<Camino<TipoDelDato>>
+dijkstra_init(origen:NodoGrafoNuevo<TipoDelDato>,distancias:Cola<double>,
colaPendientes:Cola<NodoGrafoNuevo<TipoDelDato>>,nodosAnteriores:Cola<NodoGrafoNuevo<TipoDelDato>>):void
+dijkstra_calcula(distancias:Cola<double>,colaPendientes:Cola<NodoGrafoNuevo<TipoDelDato>>,
nodosAnteriores:Cola<NodoGrafoNuevo<TipoDelDato>>):void
+dijkstra_procesaResultados(distancias:Cola<Double>, nodosAnteriores:Cola<NodoGrafoNuevo<TipoDelDato>> ,
origen: NodoGrafoNuevo<TipoDelDato> ):Cola<Camino<TipoDelDato>>
}




class ListaSimple {
-datos:ElementoLS[]
-maximo:int
+isVacia():boolean
+vaciar()
-add(el:ElementoLS):int
+add(s:String)
+add(o:Object)
+insert(s:String,posicion:int)
+insert(o:Object,posicion:int)
+del(posicion:int):int
+getNumeroElementos():int
+getPosicion(el:ElementoLS):int
+getPrimero():ElementoLS
+getUltimo():ElementoLS
-getSiguiente(el:ElementoLS):ElementoLS
+getElemento(posicion:int):ElementoLS
}

class ElementoLS {
-data:Object
+getData():Object
+setData(o Object):Object
}

ElementoLS <-- ListaSimple: datos

class ListaEnlazada {
-primero:ElementoLE
+isVacia():boolean
+vaciar()
-add(el:ElementoLE):int
+add(s:String)
+add(o:Object)
+insert(s:String,posicion:int)
+insert(o:Object,posicion:int)
+del(posicion:int):int
+getNumeroElementos():int
+getPosicion(el:ElementoLE):int
+getPrimero():ElementoLE
+getUltimo():ElementoLE
+getSiguiente(el:ElementoLE):ElementoLE
+getElemento(posicion:int):ElementoLE
}

class ElementoLE {
-siguiente:ElementoLE
-data:Object
-insertarmeEn(el:ElementoLE)
-getSiguiente():ElementoLE
+getData():Object
+setData():Object
}

ListaEnlazada --> ElementoLE:primero
ElementoLE --> ElementoLE:siguiente


class Cola{
-cabeza:ElementoLE
-cola:ElementoLE
+esVacia():boolean
+push(el:ElementoLE)
+pop():ElementoLE
}



class Entorno {
maximo3
}

package Recurso{
abstract class Recursos{
tiempoDeVida:int
probNuevoRecurso:int
posN:int
posM:int
+Recursos(turnosRestantes:int,posN:int,posM:int,probNuevoRecurso:int)
+Recursos(turnosRestantes:int,posN:int,posM:int)
+Recursos(tiempoDeVida:int)
+getTurnosRestantes():int
+setTurnosRestantes(turnosRestantes:int):void
+getProbNuevoRecurso():float
+setProbNuevoRecurso(probNuevoRecurso:float):void
+getPosN():int
+setPosN(posN:int):void
+getPosM():int
+setPosM(posM:int):void
+toString():String

interactuar()
}
class RecursosProperties{
#original:Recursos
- turnosRestantes:IntegerProperty
- posN:IntegerProperty
- posM:IntegerProperty
- probNuevoRecurso: FloatProperty
RecursosProperties(original:Recursos)
setOriginal(original: Recursos):void
getOriginal():Recursos
rollback():void
commit():void
turnosRestantesProperty():Property<Number>
posNProperty():Property<Number>
posMProperty():Property<Number>
probNuevoRecurso():Property<Number>
}
Recursos--|>RecursosProperties
class Agua{
-probAgua:float
-aumentoDeVida
+Agua(turnosRestantes:int,aumentoDeVida:int)
+Agua(tiempoDeVida:int,probAgua:float)
+getAumentoDeVida():int
+setAumentoDeVida(aumentoDeVida:int):void
+getProbAgua():float
+setProbAgua(probAgua:float):void
}
class AguaProperties {
#originalAgua: Agua
-turnosRestantes: IntegerProperty
-aumentoDeVida: IntegerProperty
-probAgua: FloatProperty
+AguaProperties(original: Agua)
+commit(): void
+rollback(): void
+getOriginalAgua(): Agua
+setOriginalAgua(originalAgua: Agua): void
+turnosRestantesProperty(): IntegerProperty
+aumentoDeVidaProperty(): IntegerProperty
+probAguaProperty(): FloatProperty
}
Agua --|> AguaProperties
class Comida{
-aumentoDeVida:int
-probComida:float
+Comida(tiempoDeVida:int,probComida:float)
+Comida(turnosRestantes:int,aumentoDeVida:int)
+getAumentoDeVida():int
+setAumentoDeVida(aumentoDeVida:int):void
+getAumentoDeVida():int
+setAumentoDeVida(aumentoDeVida:int):void
}
class ComidaProperties {
#original: Comida
-turnosRestantes: IntegerProperty
-aumentoDeVida: IntegerProperty
-probComida: FloatProperty
+ComidaProperties(original: Comida)
+commit(): void
+rollback(): void
+getOriginal(): Comida
+setOriginal(original: Comida): void
+turnosRestantesProperty(): IntegerProperty
+aumentoDeVidaProperty(): IntegerProperty
+probComidaProperty(): FloatProperty
}
Comida <-- ComidaProperties
class Montana{
-disminucionDeVida
+Montana(tiempoDeVida:int,probMontana:int)
+Montana(turnosRestantes:int,disminucionDeVida:int)
+getDisminucionDeVida():int
+setDisminucionDeVida(DisminucionDeVida:int):void
+getProbMontana():float
+setProbMontana(probMontana:float):void
}
class MontanaProperties {
#original: Montana
-turnosRestantes: IntegerProperty
-disminucionDeVida: IntegerProperty
-probMontana: FloatProperty
+MontanaProperties(original: Montana)
+commit(): void
+rollback(): void
+getOriginal(): Montana
+setOriginal(original: Montana): void
+turnosRestantesProperty(): IntegerProperty
+disminucionDeVidaProperty(): IntegerProperty
+probMontanaProperty(): FloatProperty
}
Montana --|> MontanaProperties
class Tesoro{
-AumentoPorcenRep
-probTesoro
+Tesoro(turnosRestantes:int,aumentoDeVida:int)
+Tesoro(tiempoDeVida:int,probTesoro:float)
+getAumentoPorcenRep():float
+setAumentoPorcenRep(AumentoPorcenRep:float):void
+getProbTesoro():float
+setProbTesoro(probTesoro:float):void
}
class TesoroProperties {
#original: Tesoro
-turnosRestantes: IntegerProperty
-aumentoDePorcenRep: FloatProperty
-probTesoro: FloatProperty
+TesoroProperties(original: Tesoro)
+commit(): void
+rollback(): void
+getOriginal(): Tesoro
+setOriginal(original: Tesoro): void
+turnosRestantesProperty(): IntegerProperty
+aumentoDePorenRepProperty(): FloatProperty
+probTesoroProperty(): FloatProperty
}
Tesoro --|> TesoroProperties
class Biblioteca{
-AumentoPorcenClon:float
-probBiblioteca:int
+Biblioteca(turnosRestantes:int,aumentoDeVida:int)
+Biblioteca(tiempoDeVida:int,probBiblioteca:float)
+getAumentoPorcenClon():float
+setAumentoPorcenClon(AumentoPorcenClon:float):void
+getProbBiblioteca():float
+setProbBiblioteca(probBiblioteca:float):void
}
class BibliotecaProperties {
#original: Biblioteca
-turnosRestantes: IntegerProperty
-aumentoDePorenClon: FloatProperty
-probBilio: FloatProperty
+BibliotecaProperties(original: Biblioteca)
+commit(): void
+rollback(): void
+getOriginal(): Biblioteca
+setOriginal(original: Biblioteca): void
+turnosRestantesProperty(): IntegerProperty
+aumentoDePorenClonProperty(): FloatProperty
+probBibliotecaProperty(): FloatProperty
}
Biblioteca--|> BibliotecaProperties
class Pozo{
#probPozo:float
+Pozo(tiempoDeVida:int)
+Pozo(tiempoDeVida:int,probPozo:float)
+getProbPozo():float
+setProbPozo(float:probPozo):void
}
class PozoProperties {
# original: Pozo
- turnosRestantes: IntegerProperty
- probPozo: FloatProperty

+PozoProperties(original: Pozo)
+commit(): void
+rollback(): void
+getOriginal(): Pozo
+setOriginal(original: Pozo): void
}
Pozo --|> PozoProperties

}

Individuo "0,1,2,3" --o BucleDeControl
Entorno "0,1,2,3" --o BucleDeControl
Tablero "NxM" --o BucleDeControl


IndAvanzado --|> Individuo
IndBasico --|> Individuo
IndNormal --|> Individuo

Recursos --|> Entorno
Agua ---|> Recursos
Montana ---|> Recursos
Comida --|> Recursos
Tesoro --|> Recursos
Biblioteca ---|> Recursos
Pozo --|> Recursos

ElementoLE <-- Cola
NodoArbol <-- ArbolBinario
ArbolBinario --|> JSON
ListaEnlazada --|> JSON

Cola --|> JSON
Individuo <-- ArbolBinario
ListaSimple --|> JSON

NodoGrafoNuevo --> ListaSimple: listaSalida
NodoGrafoNuevo --> ListaSimple: listaEntrada

ArcoGrafoNuevo --> NodoGrafoNuevo: origen
ArcoGrafoNuevo --> NodoGrafoNuevo: destino

GrafoNuevo --> ListaSimple:listaVertices
GrafoNuevo --> ListaSimple:listaArcos





class Celda{
-listaIndividuo: ListaEnlazada<>
-listaRecurso: ListaEnlazada<>
+Celda(): void
+Celda(listaIndividuo:ListaEnlazada<>, listaRecurso: ListaEnlazada<>):void
+getListaIndividuo():ListaEnlazada<>
+setListaIndividuo(listaIndividuo:ListaEnlazada)
+getListaRecurso():ListaEnlazada<>
+setListaRecurso(listaRecurso:ListaEnlazada)
+addIndividuo(individuo:Individuo)
+addRecurso(recurso:Recurso)
}

class Superar3Individuos{}
class Superar3Recursos{}




@enduml
